{"version":3,"sources":["hok/withAuthRedirect.js","components/profile/profileInfo/ProfileStatusWithHooks.js","components/profile/profileInfo/ProfileInfo.js","components/profile/myPosts/post/Post.js","components/profile/myPosts/MyPost.js","components/profile/myPosts/MyPostConteiner.js","components/profile/Profile.js","components/profile/ProfileContainer.js"],"names":["mapStateToPropsForRedirect","state","isAuth","authReducer","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","Object","keys","profile","length","Spinner","src","className","photos","large","small","userPhoto","aboutMe","fullName","Post","message","likesCount","maxLength10","maxLengthCreator","AddMyPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPost","console","log","addPost","postsElement","posts","map","post","id","newPost","MyPostContainer","profileReducer","profilePage","newPostText","dispatch","updateNewPostText","text","action","updateNewPostTextActionCreator","addPostActionCreator","Profile","compose","authorizedUserId","userId","getUserProfile","getStatus","params","useParams"],"mappings":"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","file":"static/js/3.6692899f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navigate} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\n\r\nlet mapStateToPropsForRedirect = (state) =>{\r\n    \r\n    return{\r\n        isAuth: state.authReducer.isAuth\r\n    }\r\n}\r\n\r\n\r\nexport const withAuthRedirect = (Component) =>{\r\n    class RedirectComponent extends React.Component{\r\n        render(){\r\n                if(!this.props.isAuth) return <Navigate to='/login'/>;\r\n                return <Component {...this.props}/>\r\n}\r\n}\r\n\r\n   let ConnectAuthRedirectComponenet = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n\r\n\r\n    return ConnectAuthRedirectComponenet;\r\n}\r\n","import React from \"react\";\r\nimport { useState, useEffect} from \"react\";\r\n\r\n\r\nconst ProfileStatusWithHooks= (props) =>{\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() =>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () =>{\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () =>{\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n\r\n    const onStatusChange = (e) =>{\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    \r\n\r\n   \r\n    \r\n        \r\n        return(\r\n        <>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || '----- '}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange}\r\n                autoFocus={true} onBlur={deactivateEditMode} \r\n                value={status}/>\r\n            </div>\r\n            }\r\n        </>\r\n        )\r\n    \r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import './profileInfo.css';\r\nimport Spinner from '../../spinner/Spinner';\r\nimport userPhoto from '../../../assets/images/i.jpg';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\n\r\n\r\nconst ProfileInfo = (props) =>{\r\n    \r\n    if(Object.keys(props.profile).length === 0){\r\n        return <Spinner/>\r\n    }\r\n   \r\n    return(\r\n        <div>\r\n\r\n            <div>\r\n               <img src='https://avatars.mds.yandex.net/i?id=bd0479f8e5da5c9ac4e65b61cd1defd9-4566301-images-thumbs&n=13'/>\r\n            </div>\r\n            <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            <div className='profileInfoContainer'>\r\n                \r\n            <div className=''>\r\n                \r\n                <img src={props.profile.photos.large !=null ? props.profile.photos.small : userPhoto} className='userPhoto'/>\r\n            </div>\r\n            <div>\r\n                aboutMe: {props.profile.aboutMe}\r\n            </div>\r\n                <div>\r\n                fullName: {props.profile.fullName}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import './post.css';\r\n\r\nconst Post = (props) =>{\r\n    return (\r\n        <div className=''>\r\n            <img src=''/>\r\n            {props.message}\r\n            <div>\r\n                <span>like</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Post;","import './myPost.css';\r\nimport Post from './post/Post';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validator';\r\nimport { Textarea } from '../../common/formsControl/FormsControls';\r\n\r\nconst maxLength10 =  maxLengthCreator(10);\r\n\r\nconst MyPost =(props) =>{\r\n    console.log(props.addPost)\r\n    let postsElement = props.posts.map(post => (<Post message={post.message} key={post.id} likesCount={post.likesCount}/>))\r\n\r\n    let newPostBody = (newPost) =>{\r\n        props.addPost(newPost.newPost)\r\n    } ;\r\n\r\n    return(\r\n        <div >\r\n            My post\r\n            <div>\r\n                <AddMyPostFormRedux onSubmit={newPostBody}/>\r\n            </div>\r\n            <div className=''> \r\n                {postsElement}\r\n                \r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n\r\nconst AddMyPostForm = (props) =>{\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n                <Field \r\n                component={Textarea}\r\n                name={\"newPost\"}\r\n                placeholder={'Enter your post'}\r\n                validate={[required, maxLength10]}\r\n                ></Field>\r\n                <div>\r\n                <button >Add post</button>\r\n                </div>\r\n            </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostFormRedux = reduxForm({form: \"AddMyPostForm\"})(AddMyPostForm)\r\n\r\n\r\n\r\nexport default MyPost;","import { addPostActionCreator, updateNewPostTextActionCreator } from \"../../../redux/profile-reducer\";\r\nimport { connect } from \"react-redux\";\r\nimport MyPost from \"./MyPost\";\r\n\r\n\r\n\r\nlet mapStateToProps = (state) =>{\r\n    \r\n    return{\r\n        posts: state.profileReducer.profilePage.posts,\r\n        newPostText: state.profileReducer.profilePage.newPostText    \r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) =>{\r\n    \r\n    return{\r\n        updateNewPostText: (text) =>{\r\n            let action = updateNewPostTextActionCreator(text);\r\n            dispatch(action);\r\n        },\r\n        addPost: (newPost) =>{\r\n            dispatch(addPostActionCreator(newPost))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst MyPostContainer = connect (mapStateToProps, mapDispatchToProps)(MyPost);\r\n\r\nexport default MyPostContainer;","import ProfileInfo from './profileInfo/ProfileInfo';\r\nimport MyPostsContainer from './myPosts/MyPostConteiner';\r\n\r\n\r\n\r\nconst Profile = (props) =>{\r\n    \r\n    return(\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Profile;","import Profile from './Profile';\r\n\r\nimport React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile-reducer';\r\nimport { useParams} from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport {withAuthRedirect} from '../../hok/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\nconst ProfileContainer = (props) => {\r\n    \r\n    let params = useParams()\r\n    if(!params){\r\n        params = props.authorizedUserId;\r\n    }\r\n\r\n    useEffect(() => {\r\n       props.getUserProfile(params.id)\r\n    \r\n    }, [params]);\r\n    \r\n    useEffect(() => {\r\n        props.getStatus(params.id)\r\n     \r\n     }, [params]);\r\n\r\n    \r\n\r\n\r\n    return(\r\n        <div>\r\n            <Profile {...props} profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n    \r\n\r\n    let mapStateToProps = (state) =>{\r\n    \r\n        return{\r\n            profile: state.profileReducer.profilePage.profile,\r\n            status: state.profileReducer.profilePage.status,\r\n            authorizedUserId: state.authReducer.userId,\r\n            isAuth: state.authReducer.isAuth\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withAuthRedirect\r\n)(ProfileContainer);"],"sourceRoot":""}